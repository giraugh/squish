{"dependencies":[{"name":"./physicsEntity","loc":{"line":1,"column":30}},{"name":"./splatterEntity","loc":{"line":2,"column":31}}],"generated":{"js":"const PhysicsEntity = require('./physicsEntity')\nconst SplatterEntity = require('./splatterEntity')\nconst force = 25\n\nclass ParticleEntity extends PhysicsEntity {\n  constructor (_x, _y, _r, opts = {}) {\n    super(_x, _y, 0, 0, opts)\n    this.radius = _r\n    this.dontCollide = true\n    this.ethereal = true\n    this.vx = (Math.random() * force) - (force / 2)\n    this.vy = -Math.abs((Math.random() * force) - (force / 2))\n    this.depth = -1.5\n  }\n\n  update (entities, { addEntity }) {\n    // Only collide with obstacle entities\n    let obstacles = entities.filter(e => e.label === 'obstacle')\n    if (this.willIntersect(obstacles, this.vx, this.vy) || this.willIntersect(obstacles, 0, 0)) {\n      // Remove me\n      this.remove = true\n\n      // Create Splat effect\n      addEntity(new SplatterEntity(this.x, this.y, 0, 0, { colour: this.colour }))\n    }\n\n    // Remove when outside of level\n    if (this.x < 0 || this.x > window.size[0] || this.y < 0 || this.y > window.size[1]) {\n      this.remove = true\n    }\n\n    // Update like normal, (basically just move)\n    super.update(entities)\n  }\n\n  draw (ctx) {\n    ctx.fillStyle = this.colour\n    ctx.beginPath()\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2)\n    ctx.fill()\n  }\n}\n\nmodule.exports = ParticleEntity\n","map":{"mappings":[{"source":"src/particleEntity.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"src/particleEntity.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"src/particleEntity.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"src/particleEntity.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"src/particleEntity.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"src/particleEntity.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"src/particleEntity.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"src/particleEntity.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"src/particleEntity.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"src/particleEntity.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"src/particleEntity.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"src/particleEntity.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"src/particleEntity.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"src/particleEntity.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"src/particleEntity.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"src/particleEntity.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"src/particleEntity.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"src/particleEntity.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"src/particleEntity.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"src/particleEntity.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"src/particleEntity.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"src/particleEntity.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"src/particleEntity.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"src/particleEntity.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"src/particleEntity.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"src/particleEntity.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"src/particleEntity.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"src/particleEntity.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"src/particleEntity.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"src/particleEntity.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"src/particleEntity.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"src/particleEntity.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"src/particleEntity.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"src/particleEntity.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"src/particleEntity.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"src/particleEntity.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"src/particleEntity.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"src/particleEntity.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"src/particleEntity.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"src/particleEntity.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"src/particleEntity.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"src/particleEntity.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"src/particleEntity.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"src/particleEntity.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"src/particleEntity.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}}],"sources":{"src/particleEntity.js":"const PhysicsEntity = require('./physicsEntity')\nconst SplatterEntity = require('./splatterEntity')\nconst force = 25\n\nclass ParticleEntity extends PhysicsEntity {\n  constructor (_x, _y, _r, opts = {}) {\n    super(_x, _y, 0, 0, opts)\n    this.radius = _r\n    this.dontCollide = true\n    this.ethereal = true\n    this.vx = (Math.random() * force) - (force / 2)\n    this.vy = -Math.abs((Math.random() * force) - (force / 2))\n    this.depth = -1.5\n  }\n\n  update (entities, { addEntity }) {\n    // Only collide with obstacle entities\n    let obstacles = entities.filter(e => e.label === 'obstacle')\n    if (this.willIntersect(obstacles, this.vx, this.vy) || this.willIntersect(obstacles, 0, 0)) {\n      // Remove me\n      this.remove = true\n\n      // Create Splat effect\n      addEntity(new SplatterEntity(this.x, this.y, 0, 0, { colour: this.colour }))\n    }\n\n    // Remove when outside of level\n    if (this.x < 0 || this.x > window.size[0] || this.y < 0 || this.y > window.size[1]) {\n      this.remove = true\n    }\n\n    // Update like normal, (basically just move)\n    super.update(entities)\n  }\n\n  draw (ctx) {\n    ctx.fillStyle = this.colour\n    ctx.beginPath()\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2)\n    ctx.fill()\n  }\n}\n\nmodule.exports = ParticleEntity\n"},"lineCount":45}},"hash":"b8504ee92a5e8d814e375cc04c89f360","cacheData":{"env":{}}}
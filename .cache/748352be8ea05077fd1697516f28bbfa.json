{"dependencies":[{"name":"./entity","loc":{"line":1,"column":23}},{"name":"./playerEntity","loc":{"line":2,"column":29}},{"name":"tinycolor2","loc":{"line":3,"column":19}},{"name":"./util","loc":{"line":4,"column":25}}],"generated":{"js":"const Entity = require('./entity')\nconst PlayerEntity = require('./playerEntity')\nconst tc = require('tinycolor2')\nconst { lerp } = require('./util')\n\nconst interp = x => Math.max(0, (0.5 * x) + Math.pow(1.8 * x - 1, 3))\n\nclass BirthEntity extends Entity {\n  constructor (...args) {\n    // Has the same constructor signature\n    super(...args)\n\n    // Get spawn object\n    let opts = args[4]\n    this.spawn = opts.spawn\n\n    // fade out\n    this.alpha = 0\n    this.time = 0\n    this.fadeTime = 80\n\n    // no physics\n    this.ethereal = true\n  }\n\n  update (entities, { addEntity }) {\n    // Keep track of time and calculate alpha\n    this.time++\n    this.alpha = (this.time / this.fadeTime)\n\n    // die when timer up\n    if (this.time >= this.fadeTime) {\n      // Remove in the way\n      entities\n        .filter(e => e instanceof PlayerEntity)\n        .forEach(p => {\n          if (p.willIntersectWith(this, 0, 0)) {\n            p.die(addEntity)\n          }\n        })\n\n      // Remove me and create spawn\n      this.remove = true\n      if (this.spawn) { addEntity(this.spawn) }\n    }\n\n    // Call super\n    super.update(entities)\n  }\n\n  draw (ctx) {\n    // Manipulate colour with alpha\n    let a = interp(this.alpha)\n    let c = tc(this.colour)\n    c.setAlpha(a)\n    ctx.fillStyle = c.toRgbString()\n    let w = lerp(this.w, 0, 1 - a)\n    let h = lerp(this.h, 0, 1 - a)\n    let x = this.x + this.w / 2\n    let y = this.y + this.h / 2\n    ctx.fillRect(x - w / 2, y - h / 2, w, h)\n  }\n}\n\nmodule.exports = BirthEntity\n","map":{"mappings":[{"source":"src/birthEntity.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"src/birthEntity.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"src/birthEntity.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"src/birthEntity.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"src/birthEntity.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"src/birthEntity.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"src/birthEntity.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"src/birthEntity.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"src/birthEntity.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"src/birthEntity.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"src/birthEntity.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"src/birthEntity.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"src/birthEntity.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"src/birthEntity.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"src/birthEntity.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"src/birthEntity.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"src/birthEntity.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"src/birthEntity.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"src/birthEntity.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"src/birthEntity.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"src/birthEntity.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"src/birthEntity.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"src/birthEntity.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"src/birthEntity.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"src/birthEntity.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"src/birthEntity.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"src/birthEntity.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"src/birthEntity.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"src/birthEntity.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"src/birthEntity.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"src/birthEntity.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"src/birthEntity.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"src/birthEntity.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"src/birthEntity.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"src/birthEntity.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"src/birthEntity.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"src/birthEntity.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"src/birthEntity.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"src/birthEntity.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"src/birthEntity.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"src/birthEntity.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"src/birthEntity.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"src/birthEntity.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"src/birthEntity.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"src/birthEntity.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"src/birthEntity.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"src/birthEntity.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"src/birthEntity.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"src/birthEntity.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"src/birthEntity.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"src/birthEntity.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"src/birthEntity.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"src/birthEntity.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"src/birthEntity.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"src/birthEntity.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"src/birthEntity.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"src/birthEntity.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"src/birthEntity.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"src/birthEntity.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"src/birthEntity.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"src/birthEntity.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"src/birthEntity.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"src/birthEntity.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"src/birthEntity.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"src/birthEntity.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"src/birthEntity.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}}],"sources":{"src/birthEntity.js":"const Entity = require('./entity')\nconst PlayerEntity = require('./playerEntity')\nconst tc = require('tinycolor2')\nconst { lerp } = require('./util')\n\nconst interp = x => Math.max(0, (0.5 * x) + Math.pow(1.8 * x - 1, 3))\n\nclass BirthEntity extends Entity {\n  constructor (...args) {\n    // Has the same constructor signature\n    super(...args)\n\n    // Get spawn object\n    let opts = args[4]\n    this.spawn = opts.spawn\n\n    // fade out\n    this.alpha = 0\n    this.time = 0\n    this.fadeTime = 80\n\n    // no physics\n    this.ethereal = true\n  }\n\n  update (entities, { addEntity }) {\n    // Keep track of time and calculate alpha\n    this.time++\n    this.alpha = (this.time / this.fadeTime)\n\n    // die when timer up\n    if (this.time >= this.fadeTime) {\n      // Remove in the way\n      entities\n        .filter(e => e instanceof PlayerEntity)\n        .forEach(p => {\n          if (p.willIntersectWith(this, 0, 0)) {\n            p.die(addEntity)\n          }\n        })\n\n      // Remove me and create spawn\n      this.remove = true\n      if (this.spawn) { addEntity(this.spawn) }\n    }\n\n    // Call super\n    super.update(entities)\n  }\n\n  draw (ctx) {\n    // Manipulate colour with alpha\n    let a = interp(this.alpha)\n    let c = tc(this.colour)\n    c.setAlpha(a)\n    ctx.fillStyle = c.toRgbString()\n    let w = lerp(this.w, 0, 1 - a)\n    let h = lerp(this.h, 0, 1 - a)\n    let x = this.x + this.w / 2\n    let y = this.y + this.h / 2\n    ctx.fillRect(x - w / 2, y - h / 2, w, h)\n  }\n}\n\nmodule.exports = BirthEntity\n"},"lineCount":66}},"hash":"d447b5c3ca3fed90c6bddb2951da12ef","cacheData":{"env":{}}}
{"dependencies":[{"name":"./physicsEntity","loc":{"line":1,"column":30}},{"name":"./playerEntity","loc":{"line":2,"column":29}},{"name":"./birthEntity","loc":{"line":3,"column":28}},{"name":"./util","loc":{"line":4,"column":32}}],"generated":{"js":"const PhysicsEntity = require('./physicsEntity')\nconst PlayerEntity = require('./playerEntity')\nconst BirthEntity = require('./birthEntity')\nconst { least, most } = require('./util')\nlet entities = []\n\nconst inputs = [\n  {\n    left: {\n      type: 'keyboard',\n      key: 'a'\n    },\n    right: {\n      type: 'keyboard',\n      key: 'd'\n    },\n    jump: {\n      type: 'keyboard',\n      key: 'w'\n    },\n    slam: {\n      type: 'keyboard',\n      key: 's'\n    }\n  },\n  {\n    left: {\n      type: 'keyboard',\n      key: 'ArrowLeft'\n    },\n    right: {\n      type: 'keyboard',\n      key: 'ArrowRight'\n    },\n    jump: {\n      type: 'keyboard',\n      key: 'ArrowUp'\n    },\n    slam: {\n      type: 'keyboard',\n      key: 'ArrowDown'\n    }\n  },\n  {\n    left: {\n      type: 'keyboard',\n      key: 'j'\n    },\n    right: {\n      type: 'keyboard',\n      key: 'l'\n    },\n    jump: {\n      type: 'keyboard',\n      key: 'i'\n    },\n    slam: {\n      type: 'keyboard',\n      key: 'k'\n    }\n  },\n  {\n    left: {\n      type: 'keyboard',\n      key: 'f'\n    },\n    right: {\n      type: 'keyboard',\n      key: 'h'\n    },\n    jump: {\n      type: 'keyboard',\n      key: 't'\n    },\n    slam: {\n      type: 'keyboard',\n      key: 'g'\n    }\n  }\n]\n\nconst playerColours = ['#5468fe', '#fe4c55', '#ff9800', '#4caf50']\nconst playerSpawns = [\n  [275, 290],\n  [675, 290],\n  [300, 490],\n  [650, 490],\n  [200, 60],\n  [700, 60]\n]\n\nconst spawnPlayer = (n, opts) => {\n  const players = entities.filter(e => e.isPlayer || e.label === 'birth')\n  let spawn = playerSpawns[Math.round(Math.random() * (playerSpawns.length - 1))]\n  if (players.length) {\n    const dist = ([ax, ay]) => ({x: bx, y: by}) => Math.sqrt((bx - ax) ** 2 + (by - ay) ** 2)\n    const distToNearestPlayer = (spawn) => dist(spawn)(players.reduce(least(dist(spawn))))\n    spawn = playerSpawns.reduce(most(distToNearestPlayer))\n  }\n  const playerOpts = { number: n, colour: playerColours[n], inputs: inputs[n], spawnPlayer }\n  const player = new PlayerEntity(...spawn, 50, 50, Object.assign(Object.assign({}, playerOpts), opts))\n  entities.push(new BirthEntity(...spawn, 50, 50, { number: n, colour: player.getColour(), spawn: player, label: 'birth' }))\n}\n\nspawnPlayer(0)\nspawnPlayer(1)\nspawnPlayer(2)\nspawnPlayer(3)\n\nentities.push(new PhysicsEntity(150, 600, 700, 60, { colour: '#313131', kinematic: true, label: 'obstacle' }))\nentities.push(new PhysicsEntity(200, 400, 200, 20, { colour: '#313131', kinematic: true, label: 'obstacle' }))\nentities.push(new PhysicsEntity(600, 400, 200, 20, { colour: '#313131', kinematic: true, label: 'obstacle' }))\n\nconst addEntity = entity => entities.push(entity)\n\nconst byDepth = (a, b) => b.depth - a.depth\n\nconst main = ctx => {\n  entities.sort(byDepth).forEach(ent => {\n    ent.update(entities.filter(e => e !== ent), { addEntity })\n    ent.draw(ctx)\n  })\n  entities = entities.filter(e => !e.remove)\n}\n\nmodule.exports = main\n","map":{"mappings":[{"source":"src/main.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"src/main.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"src/main.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"src/main.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"src/main.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"src/main.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"src/main.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"src/main.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"src/main.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"src/main.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"src/main.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"src/main.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"src/main.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"src/main.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"src/main.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"src/main.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"src/main.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"src/main.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"src/main.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"src/main.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"src/main.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"src/main.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"src/main.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"src/main.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"src/main.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"src/main.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"src/main.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"src/main.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"src/main.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"src/main.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"src/main.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"src/main.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"src/main.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"src/main.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"src/main.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"src/main.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"src/main.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"src/main.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"src/main.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"src/main.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"src/main.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"src/main.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"src/main.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"src/main.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"src/main.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"src/main.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"src/main.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"src/main.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"src/main.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"src/main.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"src/main.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"src/main.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"src/main.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"src/main.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"src/main.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"src/main.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"src/main.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"src/main.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"src/main.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"src/main.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"src/main.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"src/main.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"src/main.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"src/main.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"src/main.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"src/main.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"src/main.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"src/main.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"src/main.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"src/main.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"src/main.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"src/main.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"src/main.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"src/main.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"src/main.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"src/main.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"src/main.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"src/main.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"src/main.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"src/main.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"src/main.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"src/main.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"src/main.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"src/main.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"src/main.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"src/main.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"src/main.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"src/main.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"src/main.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"src/main.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"src/main.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"src/main.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"src/main.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"src/main.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"src/main.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"src/main.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"src/main.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"src/main.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"src/main.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"src/main.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"src/main.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"src/main.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"src/main.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"src/main.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"src/main.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"src/main.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"src/main.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"src/main.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"src/main.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"src/main.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"src/main.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"src/main.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"src/main.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"src/main.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"src/main.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"src/main.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"src/main.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"src/main.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"src/main.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"src/main.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"src/main.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"src/main.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"src/main.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"src/main.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"src/main.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"src/main.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"src/main.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}}],"sources":{"src/main.js":"const PhysicsEntity = require('./physicsEntity')\nconst PlayerEntity = require('./playerEntity')\nconst BirthEntity = require('./birthEntity')\nconst { least, most } = require('./util')\nlet entities = []\n\nconst inputs = [\n  {\n    left: {\n      type: 'keyboard',\n      key: 'a'\n    },\n    right: {\n      type: 'keyboard',\n      key: 'd'\n    },\n    jump: {\n      type: 'keyboard',\n      key: 'w'\n    },\n    slam: {\n      type: 'keyboard',\n      key: 's'\n    }\n  },\n  {\n    left: {\n      type: 'keyboard',\n      key: 'ArrowLeft'\n    },\n    right: {\n      type: 'keyboard',\n      key: 'ArrowRight'\n    },\n    jump: {\n      type: 'keyboard',\n      key: 'ArrowUp'\n    },\n    slam: {\n      type: 'keyboard',\n      key: 'ArrowDown'\n    }\n  },\n  {\n    left: {\n      type: 'keyboard',\n      key: 'j'\n    },\n    right: {\n      type: 'keyboard',\n      key: 'l'\n    },\n    jump: {\n      type: 'keyboard',\n      key: 'i'\n    },\n    slam: {\n      type: 'keyboard',\n      key: 'k'\n    }\n  },\n  {\n    left: {\n      type: 'keyboard',\n      key: 'f'\n    },\n    right: {\n      type: 'keyboard',\n      key: 'h'\n    },\n    jump: {\n      type: 'keyboard',\n      key: 't'\n    },\n    slam: {\n      type: 'keyboard',\n      key: 'g'\n    }\n  }\n]\n\nconst playerColours = ['#5468fe', '#fe4c55', '#ff9800', '#4caf50']\nconst playerSpawns = [\n  [275, 290],\n  [675, 290],\n  [300, 490],\n  [650, 490],\n  [200, 60],\n  [700, 60]\n]\n\nconst spawnPlayer = (n, opts) => {\n  const players = entities.filter(e => e.isPlayer || e.label === 'birth')\n  let spawn = playerSpawns[Math.round(Math.random() * (playerSpawns.length - 1))]\n  if (players.length) {\n    const dist = ([ax, ay]) => ({x: bx, y: by}) => Math.sqrt((bx - ax) ** 2 + (by - ay) ** 2)\n    const distToNearestPlayer = (spawn) => dist(spawn)(players.reduce(least(dist(spawn))))\n    spawn = playerSpawns.reduce(most(distToNearestPlayer))\n  }\n  const playerOpts = { number: n, colour: playerColours[n], inputs: inputs[n], spawnPlayer }\n  const player = new PlayerEntity(...spawn, 50, 50, Object.assign(Object.assign({}, playerOpts), opts))\n  entities.push(new BirthEntity(...spawn, 50, 50, { number: n, colour: player.getColour(), spawn: player, label: 'birth' }))\n}\n\nspawnPlayer(0)\nspawnPlayer(1)\nspawnPlayer(2)\nspawnPlayer(3)\n\nentities.push(new PhysicsEntity(150, 600, 700, 60, { colour: '#313131', kinematic: true, label: 'obstacle' }))\nentities.push(new PhysicsEntity(200, 400, 200, 20, { colour: '#313131', kinematic: true, label: 'obstacle' }))\nentities.push(new PhysicsEntity(600, 400, 200, 20, { colour: '#313131', kinematic: true, label: 'obstacle' }))\n\nconst addEntity = entity => entities.push(entity)\n\nconst byDepth = (a, b) => b.depth - a.depth\n\nconst main = ctx => {\n  entities.sort(byDepth).forEach(ent => {\n    ent.update(entities.filter(e => e !== ent), { addEntity })\n    ent.draw(ctx)\n  })\n  entities = entities.filter(e => !e.remove)\n}\n\nmodule.exports = main\n"},"lineCount":127}},"hash":"0a777206bdea72c690141fc825b0e2ac","cacheData":{"env":{}}}
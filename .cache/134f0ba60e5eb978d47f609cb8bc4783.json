{"dependencies":[{"name":"./util","loc":{"line":1,"column":26}}],"generated":{"js":"const { least } = require('./util')\n\nfunction botBrain (players) {\n  const closestPlayer = players.reduce(least(p => Math.sqrt((p.x - this.x) ** 2 + (p.y - this.y) ** 2)))\n\n  let hInp = 0\n  let jInp = 0\n  let dInp = 0\n\n  // Semirandom jumping\n  if ((Math.random() < 0.05 || (this.bouncy && Math.random() < 0.3)) && (this.onGround || this.vy > 2)) {\n    jInp = 1\n  }\n\n  // Moving\n  if (Math.random() < 0.8) {\n    if (closestPlayer.y < this.y) {\n      // Above me, watch out the way\n      let dirToClosest = Math.sign(closestPlayer.x - this.x)\n      hInp = -dirToClosest\n    } else {\n      // Im above them, get them!\n      let dirToClosest = Math.sign(closestPlayer.x - this.x)\n      hInp = dirToClosest\n    }\n  }\n\n  // Ground Pound\n  if (!this.onGround) {\n    if (players.find(p => Math.abs(p.x - this.x) < 40 && p.y > this.y)) {\n      dInp = 1\n      jInp = 0\n    }\n  }\n\n  // Crap!\n  if (this.x < 130 || this.x > 810) {\n    if (this.y < 600) {\n      if (!this.isStupid) {\n        // Above lowest platform\n        let dirToCenter = Math.sign(450 - this.x)\n        hInp = dirToCenter\n      }\n    } else {\n      hInp = 0\n      jInp = 1\n    }\n  }\n\n  return {\n    hInp: hInp * 0.75,\n    jInp,\n    dInp\n  }\n}\n\nmodule.exports = botBrain\n","map":{"mappings":[{"source":"src/botBrain.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"src/botBrain.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"src/botBrain.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"src/botBrain.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"src/botBrain.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"src/botBrain.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"src/botBrain.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"src/botBrain.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"src/botBrain.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"src/botBrain.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"src/botBrain.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"src/botBrain.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"src/botBrain.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"src/botBrain.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"src/botBrain.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"src/botBrain.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"src/botBrain.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"src/botBrain.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"src/botBrain.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"src/botBrain.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"src/botBrain.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"src/botBrain.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"src/botBrain.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"src/botBrain.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"src/botBrain.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"src/botBrain.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"src/botBrain.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"src/botBrain.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"src/botBrain.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"src/botBrain.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"src/botBrain.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"src/botBrain.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"src/botBrain.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"src/botBrain.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"src/botBrain.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"src/botBrain.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"src/botBrain.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"src/botBrain.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"src/botBrain.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"src/botBrain.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"src/botBrain.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"src/botBrain.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"src/botBrain.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"src/botBrain.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"src/botBrain.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"src/botBrain.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"src/botBrain.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"src/botBrain.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"src/botBrain.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"src/botBrain.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"src/botBrain.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"src/botBrain.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"src/botBrain.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"src/botBrain.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"src/botBrain.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"src/botBrain.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"src/botBrain.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"src/botBrain.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}}],"sources":{"src/botBrain.js":"const { least } = require('./util')\n\nfunction botBrain (players) {\n  const closestPlayer = players.reduce(least(p => Math.sqrt((p.x - this.x) ** 2 + (p.y - this.y) ** 2)))\n\n  let hInp = 0\n  let jInp = 0\n  let dInp = 0\n\n  // Semirandom jumping\n  if ((Math.random() < 0.05 || (this.bouncy && Math.random() < 0.3)) && (this.onGround || this.vy > 2)) {\n    jInp = 1\n  }\n\n  // Moving\n  if (Math.random() < 0.8) {\n    if (closestPlayer.y < this.y) {\n      // Above me, watch out the way\n      let dirToClosest = Math.sign(closestPlayer.x - this.x)\n      hInp = -dirToClosest\n    } else {\n      // Im above them, get them!\n      let dirToClosest = Math.sign(closestPlayer.x - this.x)\n      hInp = dirToClosest\n    }\n  }\n\n  // Ground Pound\n  if (!this.onGround) {\n    if (players.find(p => Math.abs(p.x - this.x) < 40 && p.y > this.y)) {\n      dInp = 1\n      jInp = 0\n    }\n  }\n\n  // Crap!\n  if (this.x < 130 || this.x > 810) {\n    if (this.y < 600) {\n      if (!this.isStupid) {\n        // Above lowest platform\n        let dirToCenter = Math.sign(450 - this.x)\n        hInp = dirToCenter\n      }\n    } else {\n      hInp = 0\n      jInp = 1\n    }\n  }\n\n  return {\n    hInp: hInp * 0.75,\n    jInp,\n    dInp\n  }\n}\n\nmodule.exports = botBrain\n"},"lineCount":58}},"hash":"7661cd18e46a0e102158e30dcc76dc57","cacheData":{"env":{}}}
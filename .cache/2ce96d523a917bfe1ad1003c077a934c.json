{"dependencies":[{"name":"./entity","loc":{"line":1,"column":23}},{"name":"./util","loc":{"line":2,"column":38}}],"generated":{"js":"const Entity = require('./entity')\nconst { rectanglesOverlap } = require('./util')\n\nconst wouldCollide = (me, them, xd, yd) => {\n  let {x: ax, y: ay, w: aw, h: ah} = me\n  let {x: bx, y: by, w: bw, h: bh} = them\n  return rectanglesOverlap(ax + xd, ay + yd, aw, ah, bx, by, bw, bh)\n}\n\nconst willCollide = (entities, me, xd, yd) =>\n  entities.some(e => wouldCollide(me, e, xd, yd))\n\nclass PhysicsEntity extends Entity {\n  constructor (_x, _y, _w, _h, _opts = {}) {\n    super(_x, _y, _w, _h, _opts)\n    const {\n      gravity: _grav = 0.5,\n      kinematic: _kin = false,\n      ethereal: _ether = false,\n      dontCollide: _dc = false\n    } = _opts\n\n    this.gravity = _grav\n    this.kinematic = _kin\n    this.ethereal = _ether\n    this.dontCollide = _dc\n    this.vx = 0\n    this.vy = 0\n  }\n\n  willIntersect (entities, dx, dy) {\n    // Only collide with 'real' entities\n    let colliders = entities.filter(e => !(e.ethereal || false))\n\n    // Return result\n    return willCollide(colliders, this, dx, dy)\n  }\n\n  willIntersectWith (entity, dx, dy) {\n    return wouldCollide(this, entity, dx, dy)\n  }\n\n  update (entities) {\n    // Accelerate due to Gravity\n    if (!(this.kinematic || false)) {\n      this.vy += this.gravity\n    }\n\n    // Only collide with 'real' entities\n    let colliders = entities.filter(e => !(e.ethereal || false))\n\n    // If dont collide then just displace and be done with it\n    if (this.dontCollide) {\n      this.x += this.vx\n      this.y += this.vy\n      return\n    }\n\n    // No need to check displacement if kinematic\n    if (this.kinematic) {\n      return\n    }\n\n    // Horizontal Displacement\n    if (!willCollide(colliders, this, this.vx, 0)) {\n      this.x += this.vx\n    } else {\n      let a = 0\n      while (!willCollide(colliders, this, Math.sign(this.vx), 0) && a < 100) {\n        a++\n        this.x += Math.sign(this.vx)\n      }\n      this.vx = 0\n    }\n\n    // Vertical Displacement\n    if (!willCollide(colliders, this, 0, this.vy)) {\n      this.y += this.vy\n    } else {\n      let a = 0\n      while (!willCollide(colliders, this, 0, Math.sign(this.vy)) && a < 100) {\n        a++\n        this.y += Math.sign(this.vy)\n      }\n      this.vy = 0\n    }\n  }\n}\n\nmodule.exports = PhysicsEntity\n","map":{"mappings":[{"source":"src/physicsEntity.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"src/physicsEntity.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"src/physicsEntity.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"src/physicsEntity.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"src/physicsEntity.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"src/physicsEntity.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"src/physicsEntity.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"src/physicsEntity.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"src/physicsEntity.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"src/physicsEntity.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"src/physicsEntity.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"src/physicsEntity.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"src/physicsEntity.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"src/physicsEntity.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"src/physicsEntity.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"src/physicsEntity.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"src/physicsEntity.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"src/physicsEntity.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"src/physicsEntity.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"src/physicsEntity.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"src/physicsEntity.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"src/physicsEntity.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"src/physicsEntity.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"src/physicsEntity.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"src/physicsEntity.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"src/physicsEntity.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"src/physicsEntity.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"src/physicsEntity.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"src/physicsEntity.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"src/physicsEntity.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"src/physicsEntity.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"src/physicsEntity.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"src/physicsEntity.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"src/physicsEntity.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"src/physicsEntity.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"src/physicsEntity.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"src/physicsEntity.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"src/physicsEntity.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"src/physicsEntity.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"src/physicsEntity.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"src/physicsEntity.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"src/physicsEntity.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"src/physicsEntity.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"src/physicsEntity.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"src/physicsEntity.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"src/physicsEntity.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"src/physicsEntity.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"src/physicsEntity.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"src/physicsEntity.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"src/physicsEntity.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"src/physicsEntity.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"src/physicsEntity.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"src/physicsEntity.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"src/physicsEntity.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"src/physicsEntity.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"src/physicsEntity.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"src/physicsEntity.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"src/physicsEntity.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"src/physicsEntity.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"src/physicsEntity.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"src/physicsEntity.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"src/physicsEntity.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"src/physicsEntity.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"src/physicsEntity.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"src/physicsEntity.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"src/physicsEntity.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"src/physicsEntity.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"src/physicsEntity.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"src/physicsEntity.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"src/physicsEntity.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"src/physicsEntity.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"src/physicsEntity.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"src/physicsEntity.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"src/physicsEntity.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"src/physicsEntity.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"src/physicsEntity.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"src/physicsEntity.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"src/physicsEntity.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"src/physicsEntity.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"src/physicsEntity.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"src/physicsEntity.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"src/physicsEntity.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"src/physicsEntity.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"src/physicsEntity.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"src/physicsEntity.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"src/physicsEntity.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"src/physicsEntity.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"src/physicsEntity.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"src/physicsEntity.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"src/physicsEntity.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"src/physicsEntity.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}}],"sources":{"src/physicsEntity.js":"const Entity = require('./entity')\nconst { rectanglesOverlap } = require('./util')\n\nconst wouldCollide = (me, them, xd, yd) => {\n  let {x: ax, y: ay, w: aw, h: ah} = me\n  let {x: bx, y: by, w: bw, h: bh} = them\n  return rectanglesOverlap(ax + xd, ay + yd, aw, ah, bx, by, bw, bh)\n}\n\nconst willCollide = (entities, me, xd, yd) =>\n  entities.some(e => wouldCollide(me, e, xd, yd))\n\nclass PhysicsEntity extends Entity {\n  constructor (_x, _y, _w, _h, _opts = {}) {\n    super(_x, _y, _w, _h, _opts)\n    const {\n      gravity: _grav = 0.5,\n      kinematic: _kin = false,\n      ethereal: _ether = false,\n      dontCollide: _dc = false\n    } = _opts\n\n    this.gravity = _grav\n    this.kinematic = _kin\n    this.ethereal = _ether\n    this.dontCollide = _dc\n    this.vx = 0\n    this.vy = 0\n  }\n\n  willIntersect (entities, dx, dy) {\n    // Only collide with 'real' entities\n    let colliders = entities.filter(e => !(e.ethereal || false))\n\n    // Return result\n    return willCollide(colliders, this, dx, dy)\n  }\n\n  willIntersectWith (entity, dx, dy) {\n    return wouldCollide(this, entity, dx, dy)\n  }\n\n  update (entities) {\n    // Accelerate due to Gravity\n    if (!(this.kinematic || false)) {\n      this.vy += this.gravity\n    }\n\n    // Only collide with 'real' entities\n    let colliders = entities.filter(e => !(e.ethereal || false))\n\n    // If dont collide then just displace and be done with it\n    if (this.dontCollide) {\n      this.x += this.vx\n      this.y += this.vy\n      return\n    }\n\n    // No need to check displacement if kinematic\n    if (this.kinematic) {\n      return\n    }\n\n    // Horizontal Displacement\n    if (!willCollide(colliders, this, this.vx, 0)) {\n      this.x += this.vx\n    } else {\n      let a = 0\n      while (!willCollide(colliders, this, Math.sign(this.vx), 0) && a < 100) {\n        a++\n        this.x += Math.sign(this.vx)\n      }\n      this.vx = 0\n    }\n\n    // Vertical Displacement\n    if (!willCollide(colliders, this, 0, this.vy)) {\n      this.y += this.vy\n    } else {\n      let a = 0\n      while (!willCollide(colliders, this, 0, Math.sign(this.vy)) && a < 100) {\n        a++\n        this.y += Math.sign(this.vy)\n      }\n      this.vy = 0\n    }\n  }\n}\n\nmodule.exports = PhysicsEntity\n"},"lineCount":91}},"hash":"ef4f5d9b00e396c15414a23a56623e4b","cacheData":{"env":{}}}